# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'editmenu_UI.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import pymongo
import dns

from PyQt5.QtWidgets import QTableWidgetItem

import add_menu
import datacollect
import Update_menu
import milktea_main

listing = []
class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(533, 541)
        Dialog.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.tableWidget = QtWidgets.QTableWidget(Dialog)
        self.tableWidget.setGeometry(QtCore.QRect(20, 160, 491, 331))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.frame_3 = QtWidgets.QFrame(Dialog)
        self.frame_3.setGeometry(QtCore.QRect(20, 10, 491, 81))
        self.frame_3.setStyleSheet("background-color: rgb(53, 53, 53);\n"
"border-width:2px;  \n"
"")
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.name = QtWidgets.QLabel(self.frame_3)
        self.name.setGeometry(QtCore.QRect(20, 10, 211, 61))
        font = QtGui.QFont()
        font.setPointSize(27)
        self.name.setFont(font)
        self.name.setStyleSheet("color:white;")
        self.name.setObjectName("name")
        self.add_but = QtWidgets.QPushButton(Dialog)
        self.add_but.setGeometry(QtCore.QRect(430, 120, 75, 23))
        self.add_but.setStyleSheet("color:rgb(255, 255, 255);\n"
"background-color:rgb(0, 170, 0);\n"
"border:none;")
        self.add_but.setObjectName("add_but")

        self.re_but = QtWidgets.QPushButton(Dialog)
        self.re_but.setGeometry(QtCore.QRect(350, 120, 75, 23))
        self.re_but.setStyleSheet("color:rgb(255, 255, 255);\n"
                                   "background-color:rgb(0, 170, 0);\n"
                                   "border:none;")
        self.re_but.setText("Refresh")
        self.re_but.setObjectName("re_but")



        self.label_3 = QtWidgets.QLabel(Dialog)
        self.label_3.setGeometry(QtCore.QRect(30, 120, 71, 21))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.found = QtWidgets.QLabel(Dialog)
        self.found.setGeometry(QtCore.QRect(110, 120, 71, 21))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.found.setFont(font)
        self.found.setObjectName("found")
        self.back_but = QtWidgets.QPushButton(Dialog)
        self.back_but.setGeometry(QtCore.QRect(20, 510, 75, 23))
        self.back_but.setStyleSheet("color:rgb(255, 255, 255);\n"
"background-color: rgb(255, 82, 82);\n"
"border:none;")
        self.back_but.setObjectName("back_but")

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)
        self.add_but.clicked.connect(self.openadd_page)
        self.settable()
        self.re_but.clicked.connect(self.settable)
        self.back_but.clicked.connect(self.back)
        self.back_but.clicked.connect(Dialog.close)

    def openadd_page(self):
        self.window = QtWidgets.QMainWindow()
        self.ui = add_menu.Ui_Dialog()
        self.ui.setupUi(self.window)
        self.window.show()

    def back(self):
        self.window = QtWidgets.QMainWindow()
        self.ui = milktea_main.Ui_Dialog()
        self.ui.setupUi(self.window)
        self.window.show()

    def settable(self):
        cloudDatabase = "mongodb+srv://Wan:Hktdtn234@cluster0.pofzb.mongodb.net/lets_read?retryWrites=true&w=majority"
        with pymongo.MongoClient(cloudDatabase) as conn:
            db = conn.get_database('Milk_Tea')
            where = {}
            cursor = db.menu.find()
            count = db.menu.count_documents(where)
            self.found.setText("{}".format(count))
            self.tableWidget.setColumnCount(5)
            self.tableWidget.setRowCount(count)

            header1 = QtWidgets.QTableWidgetItem("Menu name")
            header2 = QtWidgets.QTableWidgetItem("price")
            header3 = QtWidgets.QTableWidgetItem("Point ")
            header4 = QtWidgets.QTableWidgetItem("")
            header5 = QtWidgets.QTableWidgetItem("")


            self.tableWidget.setHorizontalHeaderItem(0, header1)
            self.tableWidget.setHorizontalHeaderItem(1, header2)
            self.tableWidget.setHorizontalHeaderItem(2, header3)
            self.tableWidget.setHorizontalHeaderItem(3, header4)
            self.tableWidget.setHorizontalHeaderItem(4, header5)


            row = 0
            for i in cursor:
                listing.append(i['menu_name'])
                self.tableWidget.setItem(row, 0, QTableWidgetItem("{}".format(i['menu_name'])))
                self.tableWidget.setItem(row, 1, QTableWidgetItem("{}".format(i['price'])))
                self.tableWidget.setItem(row, 2, QTableWidgetItem("{}".format(i['point'])))
                # ------------button---------------------------------------------------------
                self.delete_but = QtWidgets.QPushButton('Delete')
                self.delete_but.setStyleSheet("background-color: rgb(206, 1, 1);\n"
                                              "color:white;\n"
                                              "border-style:outset;")
                self.upadate = QtWidgets.QPushButton('Update')
                self.upadate.setStyleSheet("background-color: rgb(0, 211, 214);\n"
                                           "color:white;\n"
                                           "border-style:outset;")


                self.tableWidget.setCellWidget(row, 4, self.delete_but)
                self.tableWidget.setCellWidget(row, 3, self.upadate)


                self.delete_but.clicked.connect(self.delete)
                self.upadate.clicked.connect(self.openupdate)
                # self.upadate.clicked.connect(Dialog.close)

                # -----------------------------------------------------------------------------
                row += 1


    def openupdate(self):
        button = QtWidgets.qApp.focusWidget()
        index = self.tableWidget.indexAt(button.pos())
        datacollect.menuname = listing[index.row()]
        self.window = QtWidgets.QMainWindow()
        self.ui = Update_menu.Ui_Dialog()
        self.ui.setupUi(self.window)
        self.window.show()


    def delete(self):
        button = QtWidgets.qApp.focusWidget()
        index = self.tableWidget.indexAt(button.pos())
        datacollect.menuname = listing[index.row()]
        cloudDatabase = "mongodb+srv://Wan:Hktdtn234@cluster0.pofzb.mongodb.net/lets_read?retryWrites=true&w=majority"
        with pymongo.MongoClient(cloudDatabase) as conn:
            db = conn.get_database('Milk_Tea')
            where = {'menu_name': '{}'.format(datacollect.menuname)}
            db.menu.delete_one(where)
            datacollect.show_popupsuccess('delete {}'.format(datacollect.menuname))
            self.settable()
        print("delete {}".format(datacollect.menuname))

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.name.setText(_translate("Dialog", "Edit menu"))
        self.add_but.setText(_translate("Dialog", "Add menu"))
        self.label_3.setText(_translate("Dialog", "Found :"))
        self.found.setText(_translate("Dialog", "1"))
        self.back_but.setText(_translate("Dialog", "Back"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
