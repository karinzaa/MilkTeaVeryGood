# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'milktea_MainUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QPixmap
import base64
import pymongo
import dns
from PyQt5.QtWidgets import QTableWidgetItem, QMessageBox

import addmember
import checkout_page
import datacollect
import editmenu


class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(1620, 875)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(Dialog.sizePolicy().hasHeightForWidth())
        Dialog.setSizePolicy(sizePolicy)
        Dialog.setStyleSheet("background-color: rgb(255, 198, 98);")
        self.scrollArea = QtWidgets.QScrollArea(Dialog)
        self.scrollArea.setGeometry(QtCore.QRect(20, 180, 811, 491))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.scrollArea.sizePolicy().hasHeightForWidth())
        self.scrollArea.setSizePolicy(sizePolicy)
        self.scrollArea.setMinimumSize(QtCore.QSize(0, 100))
        self.scrollArea.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-style:outset;\n"
"")
        self.scrollArea.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAsNeeded)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents_3 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_3.setGeometry(QtCore.QRect(0, 0, 811, 491))
        self.scrollAreaWidgetContents_3.setObjectName("scrollAreaWidgetContents_3")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents_3)
        self.verticalLayout.setObjectName("verticalLayout")



      #--------------------------------------------------------------------------------------
        self.createlisting()



        #---------------------------------------------------------------------------------------------

        self.scrollArea.setWidget(self.scrollAreaWidgetContents_3)
        self.frame_3 = QtWidgets.QFrame(Dialog)
        self.frame_3.setGeometry(QtCore.QRect(20, 20, 1291, 141))
        self.frame_3.setStyleSheet("background-color: rgb(53, 53, 53);\n"
"border-width:2px;  \n"
"")
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.label_3 = QtWidgets.QLabel(self.frame_3)
        self.label_3.setGeometry(QtCore.QRect(80, 10, 471, 111))
        font = QtGui.QFont()
        font.setPointSize(80)
        self.label_3.setFont(font)
        self.label_3.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_3.setObjectName("label_3")
        self.label_5 = QtWidgets.QLabel(self.frame_3)
        self.label_5.setGeometry(QtCore.QRect(620, 0, 491, 131))
        font = QtGui.QFont()
        font.setPointSize(74)
        self.label_5.setFont(font)
        self.label_5.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_5.setObjectName("label_5")
        self.check_out = QtWidgets.QPushButton(Dialog)
        self.check_out.setGeometry(QtCore.QRect(1400, 800, 201, 61))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.check_out.setFont(font)
        self.check_out.setStyleSheet("background-color: rgb(0, 170, 0);\n"
"color:white;\n"
"border-style:outset;\n"
"")
        self.check_out.setObjectName("check_out")
        self.edit_menu = QtWidgets.QPushButton(Dialog)
        self.edit_menu.setGeometry(QtCore.QRect(40, 700, 181, 71))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.edit_menu.setFont(font)
        self.edit_menu.setStyleSheet("background-color:rgb(103, 103, 103);\n"
"color:white;\n"
"border-style:outset;\n"
"")
        self.edit_menu.setObjectName("edit_menu")
        self.tableWidget = QtWidgets.QTableWidget(Dialog)
        self.tableWidget.setGeometry(QtCore.QRect(890, 180, 701, 491))
        self.tableWidget.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.lineEdit = QtWidgets.QLineEdit(Dialog)
        self.lineEdit.setGeometry(QtCore.QRect(1380, 740, 221, 31))
        self.lineEdit.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lineEdit.setObjectName("lineEdit")
        self.check_member = QtWidgets.QPushButton(Dialog)
        self.check_member.setGeometry(QtCore.QRect(1200, 740, 161, 51))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.check_member.setFont(font)
        self.check_member.setStyleSheet("background-color: rgb(0, 170, 0);\n"
"color:white;\n"
"border-style:outset;\n"
"")
        self.check_member.setObjectName("check_member")
        self.addmember = QtWidgets.QPushButton(Dialog)
        self.addmember.setGeometry(QtCore.QRect(40, 790, 181, 71))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.addmember.setFont(font)
        self.addmember.setStyleSheet("background-color:rgb(103, 103, 103);\n"
"color:white;\n"
"border-style:outset;\n"
"")
        self.addmember.setObjectName("addmember")
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setGeometry(QtCore.QRect(1220, 680, 161, 31))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.totalprice = QtWidgets.QLabel(Dialog)
        self.totalprice.setGeometry(QtCore.QRect(1400, 680, 161, 31))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.totalprice.setFont(font)
        self.totalprice.setText("")
        self.totalprice.setObjectName("totalprice")

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)


        self.setbutton()
        self.createtable()

        self.edit_menu.clicked.connect(self.openeditmenu)
        self.edit_menu.clicked.connect(Dialog.close)
        self.addmember.clicked.connect(self.open_addmember)
        self.check_member.clicked.connect(self.member_check)
        self.check_out.clicked.connect(self.chectout)


    def chectout(self):
        member = self.lineEdit.text()
        if len(member) > 0:
            Point = 0
            name = ""
            text = "No"
            cloudDatabase = "mongodb+srv://Wan:Hktdtn234@cluster0.pofzb.mongodb.net/lets_read?retryWrites=true&w=majority"
            with pymongo.MongoClient(cloudDatabase) as conn:
                db = conn.get_database('Milk_Tea')
                where = {"tel": "{}".format(member)}
                cursor = db.member.find(where)
                count = db.member.count_documents(where)
                for i in cursor:
                    datacollect.member_name = i['name']
                    datacollect.point = i['points']
                if count > 0:
                    datacollect.member = True
                    if datacollect.point >= 20:
                        msg = QMessageBox()
                        msg.setWindowTitle("POINT")
                        msg.setText("คุณมีอยู่ {} เเต้ม ต้องการใช้ 20 เเต้มเพื่อรับส่วนลด 20% หรือไม่".format(datacollect.point))
                        msg.setIcon(QMessageBox.Question)
                        msg.setStandardButtons(QMessageBox.Yes | QMessageBox.No)
                        msg.buttonClicked.connect(self.use_point)
                        x = msg.exec_()
                    else:
                        self.member_No_point()
                else:
                    datacollect.show_member2()
        else:
            datacollect.final_total = datacollect.pricecalculate()
            datacollect.cart = []
            self.createtable()
            self.open_checkout_page()






    def use_point(self,i):
        cloudDatabase = "mongodb+srv://Wan:Hktdtn234@cluster0.pofzb.mongodb.net/lets_read?retryWrites=true&w=majority"
        with pymongo.MongoClient(cloudDatabase) as conn:
            db = conn.get_database('Milk_Tea')
            where = {"name": "{}".format(datacollect.member_name)}

            if i.text() == '&Yes':
                datacollect.point_use = True
                print("use point")
                datacollect.point = (datacollect.point-20) + datacollect.point_sum()
                datacollect.final_total = datacollect.pricecalculate() - ((datacollect.pricecalculate()*10)/100)
                datacollect.point_get = datacollect.point_sum()
                setTo = {'$set': {'points': datacollect.point}}
                db.member.update_one(where, setTo)
                datacollect.cart = []
                self.lineEdit.clear()
                self.createtable()
                self.open_checkout_page()

            else:
                self.member_No_point()


    def open_checkout_page(self):
        self.window = QtWidgets.QMainWindow()
        self.ui = checkout_page.Ui_Dialog()
        self.ui.setupUi(self.window)
        self.window.show()

    def member_No_point(self):
        cloudDatabase = "mongodb+srv://Wan:Hktdtn234@cluster0.pofzb.mongodb.net/lets_read?retryWrites=true&w=majority"
        with pymongo.MongoClient(cloudDatabase) as conn:
            db = conn.get_database('Milk_Tea')
            where = {"name": "{}".format(datacollect.member_name)}
            print("Member Dont use point")
            datacollect.point= datacollect.point + datacollect.point_sum()
            datacollect.final_total = datacollect.pricecalculate()
            datacollect.point_get = datacollect.point_sum()
            datacollect.cart = []
            self.createtable()
            self.lineEdit.clear()
            setTo = {'$set': {'points': datacollect.point}}
            db.member.update_one(where, setTo)
            self.open_checkout_page()




    def member_check(self):
        Tel = self.lineEdit.text()
        Point = 0
        name = ""
        cloudDatabase = "mongodb+srv://Wan:Hktdtn234@cluster0.pofzb.mongodb.net/lets_read?retryWrites=true&w=majority"
        with pymongo.MongoClient(cloudDatabase) as conn:
            db = conn.get_database('Milk_Tea')
            where = {"tel": "{}".format(Tel)}
            cursor = db.member.find(where)
            count = db.member.count_documents(where)
            for i in cursor:
                name = i['name']
                Point = i['points']

            if count > 0 :
                datacollect.show_member(name,Point)
            else:
                datacollect.show_member2()

    def open_addmember(self):
        self.window = QtWidgets.QMainWindow()
        self.ui = addmember.Ui_Dialog()
        self.ui.setupUi(self.window)
        self.window.show()


    def createtable(self):
        self.totalprice.setText("{}".format(datacollect.pricecalculate()))
        self.tableWidget.setRowCount(len(datacollect.cart))
        self.tableWidget.setColumnCount(7)

        header1 = QtWidgets.QTableWidgetItem("Menu")
        header2 = QtWidgets.QTableWidgetItem("Price")
        header3 = QtWidgets.QTableWidgetItem("Quantity")
        header4 = QtWidgets.QTableWidgetItem("Totals")
        header5 = QtWidgets.QTableWidgetItem("")
        header6 = QtWidgets.QTableWidgetItem("")
        header7 = QtWidgets.QTableWidgetItem("")


        self.tableWidget.setHorizontalHeaderItem(0, header1)
        self.tableWidget.setHorizontalHeaderItem(1, header2)
        self.tableWidget.setHorizontalHeaderItem(2, header3)
        self.tableWidget.setHorizontalHeaderItem(3, header4)
        self.tableWidget.setHorizontalHeaderItem(4, header5)
        self.tableWidget.setHorizontalHeaderItem(5, header6)
        self.tableWidget.setHorizontalHeaderItem(6, header7)

        row = 0
        for i in range(len(datacollect.cart)):
            self.tableWidget.setItem(row, 0, QTableWidgetItem("{}".format(datacollect.cart[i][0])))
            self.tableWidget.setItem(row, 1, QTableWidgetItem("{}".format(datacollect.cart[i][1])))
            self.tableWidget.setItem(row, 2, QTableWidgetItem("{}".format(datacollect.cart[i][3])))
            self.tableWidget.setItem(row, 3, QTableWidgetItem(
                "{}".format(int(datacollect.cart[i][1]) * datacollect.cart[i][3])))
            #-----------------------Button-----------------------------------------------------------
            self.delete_but = QtWidgets.QPushButton('Delete')
            self.delete_but.setStyleSheet("background-color: rgb(206, 1, 1);\n"
                                          "color:white;\n"
                                          "border-style:outset;")
            self.addbut = QtWidgets.QPushButton('+')
            self.addbut.setStyleSheet("background-color: rgb(0, 211, 214);\n"
                                      "color:white;\n"
                                      "border-style:outset;")
            self.minus = QtWidgets.QPushButton('-')
            self.minus.setStyleSheet("background-color: rgb(236, 157, 0);\n"
                                      "color:white;\n"
                                      "border-style:outset;")

            self.tableWidget.setCellWidget(row, 6, self.delete_but)
            self.tableWidget.setCellWidget(row, 5, self.addbut)
            self.tableWidget.setCellWidget(row, 4, self.minus)

            self.delete_but.clicked.connect(self.deletefromcart)
            self.addbut.clicked.connect(self.addquantity)
            self.minus.clicked.connect(self.minusquantity)
            #------------------------------------------------------------------------

            row += 1

    def addquantity(self):
        button = QtWidgets.qApp.focusWidget()
        index = self.tableWidget.indexAt(button.pos())
        datacollect.cart[index.row()][3] += 1
        self.createtable()
        self.totalprice.setText("{}".format(datacollect.pricecalculate()))



    def minusquantity(self):
        button = QtWidgets.qApp.focusWidget()
        index = self.tableWidget.indexAt(button.pos())
        #print("{}".format(index.row()))
        datacollect.cart[index.row()][3] -= 1
        if datacollect.cart[index.row()][3] == 0:
            datacollect.cart.pop(index.row())
            #self.itemcount.setText("{}".format(len(datacollect.cart)))

        self.setbutton()
        self.createtable()
        self.totalprice.setText("{}".format(datacollect.pricecalculate()))

    def deletefromcart(self):
        button = QtWidgets.qApp.focusWidget()
        index = self.tableWidget.indexAt(button.pos())
        if index.isValid():
            datacollect.cart.pop(index.row())
            #self.itemcount.setText("{}".format(len(datacollect.cart)))
            self.totalprice.setText("{}".format(datacollect.pricecalculate()))
            self.setbutton()
            self.createtable()










    def setcart(self):
        print("")


    def createlisting(self):

        cloudDatabase = "mongodb+srv://Wan:Hktdtn234@cluster0.pofzb.mongodb.net/lets_read?retryWrites=true&w=majority"
        with pymongo.MongoClient(cloudDatabase) as conn:
            db = conn.get_database('Milk_Tea')
            cursor = db.menu.find()

            count = 0
            decode = ""
            listing = []
            #qun = 1
            for i in cursor:

                listing.append([i['menu_name'], i['price'], i['point'] ,i['recipe']])

                self.gridLayout_2 = QtWidgets.QGridLayout()
                self.gridLayout_2.setContentsMargins(12, 7, 3, 10)
                self.gridLayout_2.setHorizontalSpacing(13)
                self.gridLayout_2.setVerticalSpacing(20)
                self.gridLayout_2.setObjectName("gridLayout_2")
                self.buy_but = QtWidgets.QPushButton(self.scrollAreaWidgetContents_3)
                font = QtGui.QFont()
                font.setPointSize(17)
                self.buy_but.setFont(font)
                self.buy_but.setStyleSheet("background-color: rgb(53, 53, 53);\n"
                                           "color:white;\n"
                                           "border-style:outset;\n"
                                           "")
                self.buy_but.setObjectName("buy_but")
                self.buy_but.setText("เพิ่ม")
                self.gridLayout_2.addWidget(self.buy_but, 1, 2, 1, 1)

                self.buy_but.clicked.connect(lambda ch, text=count: datacollect.addproduct(listing[text]))
                self.buy_but.clicked.connect(self.setbutton)
                self.buy_but.clicked.connect(self.createtable)


                self.Bookname = QtWidgets.QLabel(self.scrollAreaWidgetContents_3)
                font = QtGui.QFont()
                font.setPointSize(17)
                self.Bookname.setFont(font)
                self.Bookname.setObjectName("Bookname")
                self.Bookname.setText(i['menu_name'])
                self.gridLayout_2.addWidget(self.Bookname, 0, 1, 1, 1)
                self.point = QtWidgets.QLabel(self.scrollAreaWidgetContents_3)
                font = QtGui.QFont()
                font.setPointSize(16)
                self.point.setFont(font)
                self.point.setObjectName("point")
                self.gridLayout_2.addWidget(self.point, 5, 1, 1, 1)
                self.price = QtWidgets.QLabel(self.scrollAreaWidgetContents_3)
                self.point.setText("{} point".format(i['point']))
                font = QtGui.QFont()
                font.setPointSize(16)
                self.price.setFont(font)
                self.price.setObjectName("price")
                self.price.setText("{} Baht".format(i['price']))
                self.gridLayout_2.addWidget(self.price, 4, 1, 1, 1)

                self.detail_but = QtWidgets.QPushButton(self.scrollAreaWidgetContents_3)
                font = QtGui.QFont()
                font.setPointSize(17)
                self.detail_but.setFont(font)
                self.detail_but.setStyleSheet("background-color: rgb(53, 53, 53);\n"
                                              "color:white;\n"
                                              "border-style:outset;\n"
                                              "")
                self.detail_but.setText('ดูสูตร')
                self.detail_but.setObjectName("detail_but")
                self.detail_but.clicked.connect(lambda ch, text=count: datacollect.recipe_view(listing[text][3]))
                # self.detail_but.clicked.connect(self.opendetail)

                self.gridLayout_2.addWidget(self.detail_but, 3, 2, 1, 1)
                self.book_img = QtWidgets.QFrame(self.scrollAreaWidgetContents_3)
                self.book_img.setStyleSheet("background-color: rgb(255, 255, 255);")
                self.book_img.setFrameShape(QtWidgets.QFrame.StyledPanel)
                self.book_img.setFrameShadow(QtWidgets.QFrame.Raised)
                self.book_img.setObjectName("book_img")

                # ---------------set image ------------------------------------
                self.Book_img = QtWidgets.QLabel(self.book_img)
                self.Book_img.setGeometry(QtCore.QRect(30, 10, 161, 201))


                decode = i['menu_image']
                b = base64.b64decode(decode)

                pixmap = QPixmap()
                pixmap.loadFromData(b)
                pixmapre = pixmap.scaled(161, 201)
                self.Book_img.setPixmap(pixmapre)
                # -------------------------------------------------------------
                self.gridLayout_2.addWidget(self.book_img, 0, 0, 6, 1)
                self.verticalLayout.addLayout(self.gridLayout_2)
                self.line = QtWidgets.QFrame(self.scrollAreaWidgetContents_3)
                self.line.setStyleSheet("background-color: rgb(41, 170, 255);")
                self.line.setFrameShape(QtWidgets.QFrame.HLine)
                self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
                self.line.setObjectName("line")
                self.verticalLayout.addWidget(self.line)
                count = count + 1


    def opendetail(self):
        print("")

    def openeditmenu(self):
        self.window = QtWidgets.QMainWindow()
        self.ui = editmenu.Ui_Dialog()
        self.ui.setupUi(self.window)
        self.window.show()

    def setbutton(self):
        if len(datacollect.cart) == 0:
            self.check_out.setEnabled(False)
            self.check_out.setStyleSheet("background-color: rgb(255, 8, 24);\n"
                                        "color:white;\n"
                                        "border-style:outset;\n"
                                        "")
        else:
            self.check_out.setEnabled(True)
            self.check_out.setStyleSheet("background-color: rgb(0, 170, 0);\n"
                                                "color:white;\n"
                                                "border-style:outset;\n"
                                                        "")



    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        #self.buy_but.setText(_translate("Dialog", "เพิ่ม"))
        #self.Bookname.setText(_translate("Dialog", "BOOK 1"))
        #self.point.setText(_translate("Dialog", "POINT :3"))
        #self.price.setText(_translate("Dialog", "PRICE :150"))
        #self.detail_but.setText(_translate("Dialog", "ดูสูตร"))
        #self.Book_img.setText(_translate("Dialog", "Book image"))
        self.label_3.setText(_translate("Dialog", "Milk Tea"))
        self.label_5.setText(_translate("Dialog", "Very Good"))
        self.check_out.setText(_translate("Dialog", "คิดเงิน"))
        self.edit_menu.setText(_translate("Dialog", "Edit menu"))
        self.check_member.setText(_translate("Dialog", "Check member"))
        self.addmember.setText(_translate("Dialog", "Add Member"))
        self.label.setText(_translate("Dialog", "Total Price :"))

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
